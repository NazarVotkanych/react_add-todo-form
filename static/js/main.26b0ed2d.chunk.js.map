{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","preparedTodos","userId","usersFromServer","find","App","useState","titleTodo","setTitleTodo","setUserId","setTodos","titleError","setTitleError","userIdError","setUserIdError","action","method","onSubmit","event","preventDefault","isError","todosId","newTodo","Math","max","prevState","type","value","onChange","target","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,uBCrDEC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,mBAAGC,UAAU,WAAWC,KAAI,wBAAYF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMF,OAA9C,gBACGE,QADH,IACGA,OADH,EACGA,EAAMJ,QCAAO,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCT,EAIES,EAJFT,GACAU,EAGED,EAHFC,UACAC,EAEEF,EAFFE,MACAN,EACEI,EADFJ,KAGF,OACE,0BACE,UAASL,EACTM,UAAWM,IACT,WACA,CAAE,sBAAuBF,IAJ7B,UAOE,oBAAIJ,UAAU,kBAAd,SACGK,IAGFN,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QCrBlBQ,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASR,UAAU,WAAnB,SACGQ,EAAMC,KAAI,SAAAN,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKT,UCLlCgB,ECPS,CACb,CACEhB,GAAI,EACJW,MAAO,qBACPD,WAAW,EACXO,OAAQ,GAEV,CACEjB,GAAI,GACJW,MAAO,kBACPD,WAAW,EACXO,OAAQ,GAEV,CACEjB,GAAI,EACJW,MAAO,qCACPD,WAAW,EACXO,OAAQ,IDVmCF,KAAI,SAAAN,GAAI,kCAClDA,GADkD,IAErDJ,KAAMa,EAAgBC,MAAK,qBAAGnB,KAAgBS,EAAKQ,WAAW,UAInDG,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,GAArC,mBAAOJ,EAAP,KAAeO,EAAf,KACA,EAA0BH,mBAAkBL,GAA5C,mBAAOF,EAAP,KAAcW,EAAd,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KA8DA,OACE,sBAAKvB,UAAU,MAAf,UACE,+CAEA,uBACEwB,OAAO,aACPC,OAAO,OACPC,SA9CN,SAAqBC,GACnBA,EAAMC,iBAEN,IAAIC,GAAU,EAYd,GAVkB,KAAdb,IACFK,GAAc,GACdQ,GAAU,GAGG,IAAXlB,IACFY,GAAe,GACfM,GAAU,IAGRA,EAAJ,CAIA,IAAM9B,EAAOa,EAAgBC,MAC3B,qBAAGnB,KAAgBiB,MAChB,KAECmB,EAAUtB,EAAMC,KAAI,qBAAGf,MAGvBqC,EAAU,CACdrC,GAHiBsC,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAGZ,EACjBzB,MAAOW,EACPZ,WAAW,EACXO,SACAZ,QAGFoB,GAAS,SAACe,GAAD,4BAAmBA,GAAnB,CAA8BH,OAtDvCd,EAAa,IACbC,EAAU,KA8DR,UAKE,sBAAKlB,UAAU,QAAf,UACE,uBACEmC,KAAK,OACL,UAAQ,aACRC,MAAOpB,EACPqB,SArEV,SAAsBV,GACpBV,EAAaU,EAAMW,OAAOF,OAEtBhB,GACFC,GAAc,IAkERkB,YAAY,kBAGbnB,GACG,sBAAMpB,UAAU,QAAhB,qCAGN,sBAAKA,UAAU,QAAf,UACE,yBACE,UAAQ,aACRoC,MAAOzB,EACP0B,SAzEV,SAAsBV,GACpBT,GAAWS,EAAMW,OAAOF,OAEpBd,GACFC,GAAe,IAkEX,UAKE,wBAAQa,MAAM,IAAII,UAAQ,EAA1B,2BAIC5B,EAAgBH,KAAI,SAAAV,GAAI,OACvB,wBACEqC,MAAOrC,EAAKL,GADd,SAIGK,EAAKJ,MAFDI,EAAKL,UAOf4B,GACC,sBAAMtB,UAAU,QAAhB,qCAIJ,wBACEmC,KAAK,SACL,UAAQ,eAFV,oBAQF,cAAC,EAAD,CAAU3B,MAAOA,QEpIvBiC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.26b0ed2d.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { Users } from '../../types';\n\ntype Props = {\n  user: Users | null;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todos } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todos\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todos } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todos[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todos } from './types';\nimport { TodoList } from './components/TodoList';\n\nconst preparedTodos: Todos[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(({ id }) => id === todo.userId) || null,\n}\n));\n\nexport const App = () => {\n  const [titleTodo, setTitleTodo] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [todos, setTodos] = useState<Todos[]>(preparedTodos);\n  const [titleError, setTitleError] = useState(false);\n  const [userIdError, setUserIdError] = useState(false);\n\n  const reset = () => {\n    setTitleTodo('');\n    setUserId(0);\n  };\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setTitleTodo(event.target.value);\n\n    if (titleError) {\n      setTitleError(false);\n    }\n  }\n\n  function handleSelect(event: React.ChangeEvent<HTMLSelectElement>) {\n    setUserId(+event.target.value);\n\n    if (userIdError) {\n      setUserIdError(false);\n    }\n  }\n\n  function handleOnAdd(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    let isError = false;\n\n    if (titleTodo === '') {\n      setTitleError(true);\n      isError = true;\n    }\n\n    if (userId === 0) {\n      setUserIdError(true);\n      isError = true;\n    }\n\n    if (isError) {\n      return;\n    }\n\n    const user = usersFromServer.find(\n      ({ id }) => id === userId,\n    ) || null;\n\n    const todosId = todos.map(({ id }) => id);\n    const maxTodosId = Math.max(...todosId);\n\n    const newTodo = {\n      id: maxTodosId + 1,\n      title: titleTodo,\n      completed: false,\n      userId,\n      user,\n    };\n\n    setTodos((prevState) => [...prevState, newTodo]);\n\n    reset();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleOnAdd}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={titleTodo}\n            onChange={handleChange}\n            placeholder=\"enter a title\"\n          />\n\n          {titleError\n           && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleSelect}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}